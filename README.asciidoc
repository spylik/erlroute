= Erlroute

Erlroute is the simple message router designed for http://www.jpaulmorrison.com/fbp/index.shtml[Flow Based Programming paradigm^].

The main idea is to use `erlroute:pub` everywhere, where you may require the data now or in the future.

Actually, erlroute do simple job - it just route messages and execution flow. Simply write erlroute:pub in places which
will require dinamic route and "destination" you can define later.

Destinations could be:
- other processes
- functions
- pool workers

== Why just do not use AMQP broker for this purpose?

1. AMQP brokers are really great! With AMQP you able to implement very flexible and complex solutions. But sometimes, when you just need to route messages inside your erlang application use amqp-broker is like to shoot out of cannon into sparrows. When you do not need full AMQP features, erlroute is here. 

2. AMQP brokers designed for message passing, meanwhile erlroute also able to manage dynamic execution routes within same process.

Erlroute designed to be low-weight, simple, fast and suitable only for manage messages & execution routes inside your Erlang applications.

== When erlroute useful for you and when not so?

* Erlroute useful if you are going to design dynamically environment where one group of processes (listeners) in some cases may require data from other processes (producers) and in some another cases - do not;
* Erlroute useful when you want to implement dynamical execution pipelines (flows) within same process;
* Erlroute useful during development - you don't need anymore to think in advance about you may require the data from this line of code somwhere in future or not.
* Erlroute useful to avoid construction like:

[source,erlang]
----
SomeData = {time, erlang:system_time()},
process1 ! SomeData,
process2 ! SomeData,
process3 ! SomeData,
process4 ! SomeData,
process5 ! SomeData,
process6 ! SomeData.
----
With erlroute you can write just: 
[source,erlang]
----
% ?MODULE - test
erlroute:pub(<<"some_test_topic">>, {time, erlang:system_time()}).
----
And then, subscibers could easy to subscribe:

[source,erlang]
----
erlroute:sub(<<"some_test_topic">>).
----

* Erlroute not useful if you are going to produce data which may required by applications written in other languages. In this case the best way is to use AMQP-broker. Erlroute designed only for internal erlang routes.

== Erlroute for erlang-driven evolutionary neural networks and genetic algorithms.
Erlroute actually do same job as axons and dendrits. Some neuron generate and produce signals via axons and other neurons receiving signals via dendrites. In erlroute axon output is `erlroute:pub` and dendites could be linked to axons by `erlroute:sub`. With erlroute you able to implement neuron evolution as well - you can obtain full list of availiable producers and topics and randomly create new links with `erlroute:sub` and randomly destroy existing with `erlroute:unsub` during your software evolution.

== Key feutures:

* ets based;
* due per module cache 'erlroute:pub' is very cheap;
* support not only message passings, but functions and pools as destinations;
* parse transform for build ets-names during compile time.

== Interface

Erlroute support some useful shortcuts.
To use shourtcuts `+{parse_transform, erlroute_transform}` must be added as compile options.
Also you can use macros eg. `?PUB(Message)` from https://github.com/spylik/erlroute/blob/master/include/erlroute.hrl[erlroute.hrl^] instead of parse_transform.

=== Publish

[source,erlang]
----
% @doc Shortcut to `erlroute:pub(?MODULE, self(), ?LINE, Topic, Message)` with auto-generated topic.
% Topic generating by concating ?MODULE and ?LINE and converting to binary.

-spec erlroute:pub(Message) -> Result 
    when
        Message :: term(),
        Result  :: list().
----

[source,erlang]
----
% @doc Shortcut to `erlroute:pub(?MODULE, self(), ?LINE, Topic, Message)`.

-spec erlroute:pub(Topic, Message) -> Result
    when
        Topic   :: binary(),
        Message :: term(),
        Result  :: list().
----


[source,erlang]
----
% @doc Publish message Message to topic Topic from line Line of module Module with registered name Pid or pid Pid.

-spec erlroute:pub(Module, Pid, Line, Topic, Message) -> Result
    when
        Module  :: atom(),
        Pid     :: pid() | atom(),
        Line    :: pos_integer(),
        Topic   :: binary(),
        Message :: term(),
        Result  :: list().
----    

=== Subscription

[source,erlang]
----
% @doc Shortcut to `erlroute:sub([{module, Module} | {topic, <<"*">>}], {pid, self(), info})`.

-spec erlroute:sub(Target) when is_atom(Module) -> ok
    when
        Module  ::  module().
----

[source,erlang]
----
% @doc Shortcut to `erlroute:sub([{module, undefined} | {topic, Topic}], {pid, self(), info})`.

-spec erlroute:sub(Topic) when is_binary(Topic) -> ok
    when
        Topic  ::  binary().
----

[source,erlang]
----
% @doc Shortcut to `erlroute:sub(Source, {pid, self(), info})`.

-spec erlroute:sub(Source) when is_list(Source) -> ok
    when
        Source  ::  [{module, module()} | {topic, binary()}].
----

[source,erlang]
----
% @doc Subscribe to the message flow. 
% Erlroute support subscription to the pid, to the registered process name or to the message pool like https://github.com/devinus/poolboy[Poolboy^].
% For the process subscribed by pid or registered name it just send message. 
% For the pools for every new message it checkout one worker, then send message to that worker and then checkin.

-spec erlroute:sub(Source,Destination) -> ok
    when
        Source      ::  [{module, module()} | {topic, binary()}],
        Destination ::  {DestType, Dest, Method} | pid() | atom(),
        DestType    ::  'process' | 'poolboy',
        Dest        ::  pid() | atom(),
        Method      ::  'info' | 'cast' | 'call'.
----

Advanced examples of usage:

[source,erlang]
----
% Subscribe current process to
% all messages with any topic produced by module testmodule.
% Sending method: info (message will be send with !).

erlroute:sub(testmodule);
----

[source,erlang]
----
% Subscribe current process to
% all messages with topic <<"megatopic">> produced by any module.
% Sending method: info (message will be send with !).

erlroute:sub(<<"megatopic">>);
----

[source,erlang]
----
% Subscribe current process to
% all messages with <<"megatopic"> topic produced by module testmodule.
% Sending method: info (message will be send with !).

erlroute:sub([{module, testmodule}, {topic, <<"megatopic">>}]);
----

[source,erlang]
----
% Subscribe process with registered name testprocess to
% all messages with any topic produced by module testmodule.
% Sending method: info (message will be send with !).

erlroute:sub([{module, testmodule}], testprocess);
----

[source,erlang]
----
% Subscribe poolboy pool with name `poolname` to
% all messages with topic <<"testtopic">> produced by any module. 
% Sending method: cast (message will be send with 'gen_server:cast')

erlroute:sub([{topic, <<"testtopic">>}], {poolboy, poolname, cast});
----

[source,erlang]
----
% Subscribe process with pid <0.51.0> to
% all messages with topic <<"testtopic">> produced by testmodule. 
% Sending method: call (message will be send with 'gen_server:call')

erlroute:sub([{module, testmodule},{topic, <<"testtopic">>}], {process, <0.51.0>, call});
----


.. to be continued
